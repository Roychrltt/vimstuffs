priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet ponce "#pragma once include guard"
#pragma once

endsnippet

snippet main
int main(int argc, char *argv[])
{
	${0}
	return 0;
}
endsnippet

snippet mainn
int main(void)
{
	${0}
	return 0;
}
endsnippet

snippet forc "general for loop (for)"
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nsa "namespace alias"
namespace ${1:alias} = ${2:namespace};
endsnippet

snippet using "using directive/using declaration/type alias"
using ${1:namespace}`!p snip.rv = ' ' if t[1] == 'namespace' else ' = ' if t[1] != '' else ''`${2:name};
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet coutdef
std::cout << GRAY << "[${1:className}] default constructor get called" << RESET << std::endl;
endsnippet

snippet coutg
std::cout << GREEN << ${1} << RESET << std::endl;
endsnippet

snippet cerr
std::cerr << ${1} << std::endl;
endsnippet

snippet coutr
std::cout << RED << ${1} << RESET << std::endl;
endsnippet

snippet up
std::unique_ptr<${1:type}> ${2}
endsnippet

snippet mu
std::make_unique<${1:type}>
endsnippet

snippet sp
std::shared_ptr<${1:type}>
endsnippet

snippet ms
std::make_shared<${1:type}>
endsnippet

snippet wp
std::weak_ptr<${1:type}> $2
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet tup
std::tuple <${1:tuple}>
endsnippet

snippet mt
std::make_tuple (${1:tuple});
endsnippet

snippet ifs
std::ifstream ${1:string}
endsnippet

snippet ofs
std::ofstream ${1:string}
endsnippet

snippet str
std::string ${1:string}
endsnippet

snippet map
std::map<$1, $2> map;
endsnippet

snippet umap
std::unordered_map<$1, $2> map;
endsnippet

snippet ss
std::stringstream ${1:string}
endsnippet

snippet rs
std::ranges::sort($1);
endsnippet

snippet rsg
std::ranges::sort($1, std::greater<>());
endsnippet

snippet v "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	private:

		${0}

	public:

		${1/(\w+).*/$1/}(void);
		${1/(\w+).*/$1/}(const std::string &name);
		${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &other);
		virtual ~${1/(\w+).*/$1/} (void);
		${1/(\w+).*/$1/} &operator=(const ${1/(\w+).*/$1/} &other);

};
endsnippet

snippet classimp "class implementation"
#include "${1:`!p snip.rv = snip.basename or "name"`}.hpp"

${1/(\w+).*/$1/}::${1/(\w+).*/$1/}(void)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] default constructor get called" << RESET << std::endl;
}

${1/(\w+).*/$1/}::${1/(\w+).*/$1/}(const std::string& name) : m_name(name)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] parametric constructor get called" << RESET << std::endl;
}

${1/(\w+).*/$1/}::${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &other)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] copy constructor get called" << RESET << std::endl;
	*this = other;
}

${1/(\w+).*/$1/}::~${1/(\w+).*/$1/}(void)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] destructor get called" << RESET << std::endl;
}

${1/(\w+).*/$1/} &${1/(\w+).*/$1/}::operator=(const ${1/(\w+).*/$1/} &other)
{
	(void) other;
	std::cout << GRAY << "[${1/(\w+).*/$1/}] copy assignment constructor get called" << RESET << std::endl;
	return *this;
}
endsnippet

snippet cla "An entire .hpp generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_HPP','ClassName'),'.*','\U&\E','')`}
#define $2

# include <iostream>
# include <string>

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
	private:

		$3

	public:

		${1/(\w+).*/$1/}(void);
		${1/(\w+).*/$1/}(const std::string &name);
		${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &other);
		virtual ~${1/(\w+).*/$1/} (void);
		${1/(\w+).*/$1/} &operator=(const ${1/(\w+).*/$1/} &other);

};

#endif /* $2 */
endsnippet

snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet

snippet cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <string>

$0

int main()
{
	std::vector<int> v = {};
	int ans = f(v);
	std::cout << ans << std::endl;
	return 0;
}
// runtime beats %
// memory beats %
endsnippet

snippet color
# define RED "\033[31m"
# define GREEN "\033[32m"
# define YELLOW "\033[33m"
# define BLUE "\033[34m"
# define MAGENTA "\033[35m"
# define CYAN "\033[36m"
# define GRAY "\033[90m"
# define BOLD "\033[1m"
# define UNDER "\033[4m"
# define BLINK "\033[5m"
# define ERASE = "\033[2K\r"
# define RESET "\033[0m"
endsnippet

snippet heap

std::vector<int> heap;
std::make_heap(heap.begin(), heap.end(), std::greater<>());

std::pop_heap(heap.begin(), heap.end()); 
heap.back() = ;
std::push_heap(heap.begin(), heap.end());
endsnippet

snippet heappop

std::vector<int> heap;
std::make_heap(heap.begin(), heap.end(), std::greater<>());

std::pop_heap(heap.begin(), heap.end()); 
auto value = heap.back();
heap.pop_back();
value = ;
heap.push_back(value);
std::push_heap(heap.begin(), heap.end());

endsnippet

snippet osit
std::copy($1.begin(), $1.end(), std::ostream_iterator<int>(std::cout, " "));
endsnippet

snippet limit
std::numeric_limits<${1:int}>::max();
endsnippet

snippet coutbool
std::cout << std::boolalpha << $1 << std::endl;
endsnippet

snippet dp
std::vector<std::vector<int>> dp;
endsnippet

snippet dfs
auto dfs = [&](this auto&& dfs, int i, int j) -> void
{
	$1
};
endsnippet

snippet function
std::function<void(int, int)> dfs = [&](int i, int j)
{
	$1
};
endsnippet

snippet inputv
int n;
std::cin >> n;
std::vector<int> v;
v.reserve(n);
for (int i = 0; i < n; i++)
{
	int tmp;
	std::cin >> tmp;
	v.push_back(tmp);
}
endsnippet

snippet pq
std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
endsnippet

snippet codechef
#include <iostream>
#include <iostream>
#include <functional>
#include <cmath>
#include <ctime>
#include <numeric>
#include <iterator>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <string>
#include <utility>

void	sovle(std::vector<int>& v)
{

}

int main(void)
{
	int n;
	std::cin >> n;
	while (n--)
	{
		int x;
		std::cin >> x;
		std::vector<int> v;
		for (int i = 0; i < x; i++)
		{
			std::cin >> v[i];
		}
		solve(v);
	}
	return 0;
}
endsnippet
# vim:ft=snippets:
