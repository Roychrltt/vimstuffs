priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet ponce "" i 
#pragma once

endsnippet

snippet main "" i
int main(int argc, char *argv[])
{
	${0}
	return 0;
}
endsnippet

snippet mainn "" i
int main(void)
{
	${0}
	return 0;
}
endsnippet

snippet forc "" i 
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

snippet beginend "" i
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet ns "" i
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nsa "" i 
namespace ${1:alias} = ${2:namespace};
endsnippet

snippet using "" i
using ${1:namespace}`!p snip.rv = ' ' if t[1] == 'namespace' else ' = ' if t[1] != '' else ''`${2:name};
endsnippet

snippet readfile "" i 
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet coutdef "" i
std::cout << GRAY << "[${1:className}] default constructor get called" << RESET << std::endl;
endsnippet

snippet coutg "" i
std::cout << GREEN << ${1} << RESET << std::endl;
endsnippet

snippet cerr "" i
std::cerr << ${1} << std::endl;
endsnippet

snippet coutr "" i
std::cout << RED << ${1} << RESET << std::endl;
endsnippet

snippet coute "" i
std::cout << $1 << " ";
endsnippet

snippet up "" i
std::unique_ptr<${1:type}> ${2}
endsnippet

snippet mu "" i
std::make_unique<${1:type}>
endsnippet

snippet sp "" i
std::shared_ptr<${1:type}>
endsnippet

snippet ms "" i
std::make_shared<${1:type}>
endsnippet

snippet wp "" i
std::weak_ptr<${1:type}> $2
endsnippet

snippet map "" i 
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet tup "" i
std::tuple <${1:tuple}>
endsnippet

snippet mt "" i
std::make_tuple (${1:tuple});
endsnippet

snippet ifs "" i
std::ifstream ${1:string}
endsnippet

snippet ofs "" i
std::ofstream ${1:string}
endsnippet

snippet str "" i
std::string ${1:string}
endsnippet

snippet um "" i
std::unordered_map<$1, $2> map;
endsnippet

snippet ss "" i
std::stringstream ${1:string}
endsnippet

snippet rs "" i
std::ranges::sort($1);
endsnippet

snippet rsg "" i
std::ranges::sort($1, std::greater<>());
endsnippet

snippet v "" i 
std::vector<${1:int}> v(${0:n});
endsnippet

snippet tp "" i 
template <typename ${1:_InputIter}>
endsnippet

snippet cl "" i 
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	private:

		${0}

	public:

		${1/(\w+).*/$1/}(void);
		${1/(\w+).*/$1/}(const std::string &name);
		${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &other);
		virtual ~${1/(\w+).*/$1/} (void);
		${1/(\w+).*/$1/} &operator=(const ${1/(\w+).*/$1/} &other);

};
endsnippet

snippet classimp "" i 
#include "${1:`!p snip.rv = snip.basename or "name"`}.hpp"

${1/(\w+).*/$1/}::${1/(\w+).*/$1/}(void)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] default constructor get called" << RESET << std::endl;
}

${1/(\w+).*/$1/}::${1/(\w+).*/$1/}(const std::string& name) : m_name(name)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] parametric constructor get called" << RESET << std::endl;
}

${1/(\w+).*/$1/}::${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &other)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] copy constructor get called" << RESET << std::endl;
	*this = other;
}

${1/(\w+).*/$1/}::~${1/(\w+).*/$1/}(void)
{
	std::cout << GRAY << "[${1/(\w+).*/$1/}] destructor get called" << RESET << std::endl;
}

${1/(\w+).*/$1/} &${1/(\w+).*/$1/}::operator=(const ${1/(\w+).*/$1/} &other)
{
	(void) other;
	std::cout << GRAY << "[${1/(\w+).*/$1/}] copy assignment constructor get called" << RESET << std::endl;
	return *this;
}
endsnippet

snippet cla "" i 
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_HPP','ClassName'),'.*','\U&\E','')`}
#define $2

# include <iostream>
# include <string>

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
	private:

		$3

	public:

		${1/(\w+).*/$1/}(void);
		${1/(\w+).*/$1/}(const std::string &name);
		${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &other);
		virtual ~${1/(\w+).*/$1/} (void);
		${1/(\w+).*/$1/} &operator=(const ${1/(\w+).*/$1/} &other);

};

#endif /* $2 */
endsnippet

snippet fnc "" i 
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet boost_test "" i
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "" i 
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "" i 
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "" i 
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet

snippet cpp "" i
#include <bits/stdc++.h>

$0

int main()
{
	std::vector<int> v = {};
	int ans = f(v);
	std::cout << ans << std::endl;
	return 0;
}
// runtime beats %
// memory beats %
endsnippet

snippet color "" i
# define RED "\033[31m"
# define GREEN "\033[32m"
# define YELLOW "\033[33m"
# define BLUE "\033[34m"
# define MAGENTA "\033[35m"
# define CYAN "\033[36m"
# define GRAY "\033[90m"
# define BOLD "\033[1m"
# define UNDER "\033[4m"
# define BLINK "\033[5m"
# define ERASE = "\033[2K\r"
# define RESET "\033[0m"
endsnippet

snippet heap "" i

std::vector<int> heap;
std::make_heap(heap.begin(), heap.end(), std::greater<>());

std::pop_heap(heap.begin(), heap.end()); 
heap.back() = ;
std::push_heap(heap.begin(), heap.end());
endsnippet

snippet heappop "" i

std::vector<int> heap;
std::make_heap(heap.begin(), heap.end(), std::greater<>());

std::pop_heap(heap.begin(), heap.end()); 
auto value = heap.back();
heap.pop_back();
value = ;
heap.push_back(value);
std::push_heap(heap.begin(), heap.end());

endsnippet

snippet osit "" i
std::copy($1.begin(), $1.end(), std::ostream_iterator<int>(std::cout, " "));
endsnippet

snippet limit "" i
std::numeric_limits<${1:int}>::max();
endsnippet

snippet coutbool "" i
std::cout << std::boolalpha << $1 << std::endl;
endsnippet

snippet dp "" i
std::vector<std::vector<int>> dp;
endsnippet

snippet course
std::vector<int> findOrder(int n, std::vector<std::vector<int>>& pres) {
	std::vector<std::vector<int>> graph(n);
	std::vector<int> inDegree(n, 0);

	for (const auto& c : pres) {
		graph[c[1]].push_back(c[0]);
		inDegree[c[0]]++;
	}

	std::queue<int> q;
	for (int i = 0; i < n; i++)
		if (inDegree[i] == 0) q.push(i);

	std::vector<int> order;
	while (!q.empty()) {
		int course = q.front();
		q.pop();
		order.push_back(course);

		for (int neighbour : graph[course]) {
			inDegree[neighbour]--;
			if (inDegree[neighbour] == 0)
				q.push(neighbour);
		}
	}
	if (order.size() == n)
		return order;
	return {};
}
endsnippet

snippet dfs "" i
auto dfs = [&](this auto&& dfs, int i) -> void
{
	if (i == n) return true;

	for (int i = 0; i < n; i++)
	{
		if (vis[i]) continue;
		vis[i] = true;
		dfs(i + 1);
		vis[i] = false;
	}
};
endsnippet

snippet function "" i
std::function<void(int, int)> dfs = [&](int i, int j)
{
	$1
};
endsnippet

snippet coini
std::vector<int> dp(amount + 1, amount + 1);
dp[0] = 0;
for (int i = 1; i <= amount; ++i) {
	for (int coin : coins) {
		if (coin <= i)
			dp[i] = min(dp[i], dp[i - coin] + 1);
	}
}
return dp[amount] > amount ? -1 : dp[amount];
endsnippet

snippet coinii
std::vector<unsigned long long> dp(amount + 1);
dp[0] = 1;
for (int c : coins)
	for (int i = c; i <= amount; i++)
		dp[i] += dp[i - c];

return dp[amount];
endsnippet

snippet bfs
std::vector<std::vector<int>> updateMatrix(std::vector<std::vector<int>>& matrix) {
	int m = matrix.size(), n = matrix[0].size();
	std::vector<std::vector<int>> ans(m, std::vector<int>(n));
	std::vector<std::vector<int>> visited(m, std::vector<int>(n));
	std::queue<std::pair<int, int>> q;

	for (int i = 0; i < m; ++i) {
		for (int j = 0; j < n; ++j) {
			if (matrix[i][j] == 0) {
				q.emplace(i, j);
				visited[i][j] = 1;
			}
		}
	}

	while (!q.empty()) {
		auto [i, j] = q.front();
		q.pop();
		for (auto [dx, dy] : dirs)
		{
			int ni = i + dx;
			int nj = j + dy;
			if (ni >= 0 && ni < m && nj >= 0 && nj < n && !visited[ni][nj]) {
				ans[ni][nj] = ans[i][j] + 1;
				q.emplace(ni, nj);
				visited[ni][nj] = 1;
			}
		}
	}

	return ans;
}
endsnippet

snippet dijkstra
using std::pair<int, int> pii

// adj is an already_built graph
void dijkstra(int start, int dst, const std::vector<std::vector<pii>>& adj) {
	std::vector<int> dist(dst + 1, INF); 
	std::priority_queue<pii, std::vector<pii>, std::greater<pii>> pq;

	dist[start] = 0;
	pq.push({start, 0});

	while (!pq.empty()) {
		auto [d, node] = pq.top();
		pq.pop();

		if (d > dist[node]) continue; 

		for (const auto& [neighbour, time] : adj[node]) {
			if (dist[node] + time < dist[neighbour]) {
				dist[neighbour] = dist[node] + time;
				pq.push(dist[neighbour], neighbour);
			}
		}
	}

	for (int i = 1; i <= dst; i++)
		std::cout << dist[i] << " ";
	std::cout << "\n";
}
endsnippet

snippet unionfind
class DSU {
	std::vector<int> v1, v2;

	DSU(int n)
	{
		v1.resize(n);
		v2.resize(n, 0);
		for (int i = 0; i < n; ++i)
			v1[i] = i;
	}

	int find(int i)
	{
		if (v1[i] != i)
			v1[i] = find(v1[i]);
		return v1[i];
	}


	void unite(int i, int k)
	{
		int a = find(i);
		int b = find(k);
		if (a != b)
		{
			if (v2[a] > v2[b])
				v1[b] = a;
			else if (v2[a] < v2[b])
				v1[a] = b;
			else
			{
				v1[b] = a;
				v2[a]++;
			}
		}
	}

	bool is_same_set(int a, int b)
	{
		return find(a) == find(b);
	}
};
endsnippet

snippet inputv
int n;
std::cin >> n;
std::vector<int> v(n);
for (int i = 0; i < n; i++)
{
	std::cin >> v[i];
}
endsnippet

snippet pq "" i
std::priority_queue<$1> pq;
endsnippet

snippet pq_ "" i
std::priority_queue<$1, std::vector<$1>, std::greater<$1>> pq;
endsnippet

snippet codechef "" i
#include <bits/stdc++.h>

void	solve(std::vector<int>& v)
{

}

int main(void)
{
	int t;
	std::cin >> t;
	while (t--)
	{
		int n;
		std::cin >> n;
		std::vector<int> v(n);
		for (int i = 0; i < n; i++)
		{
			std::cin >> v[i];
		}
		solve(v);
	}
	return 0;
}
endsnippet

snippet cf "" i
#include <bits/stdc++.h>
#define __Made return
#define in 0
#define France__ ;

int main()
{
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	std::cout.tie(0);
	$0
	__Made in France__
}
endsnippet

snippet sort "" i
std::sort($1.begin(), $1.end());
endsnippet

snippet sortr "" i
std::sort($1.begin(), $1.end(), std::greater<>());
endsnippet

snippet accumulate "" i
std::accumulate($1.begin(), $1.end(), 0);
endsnippet

snippet sync "" i
std::ios::sync_with_stdio(false);
std::cin.tie(0);
std::cout.tie(0);
endsnippet

snippet yes "" i
std::cout << "YES" << std::endl;
endsnippet

snippet no "" i
std::cout << "NO" << std::endl;
endsnippet

snippet cfs "" i
#include <bits/stdc++.h>
#define __Made return
#define in 0
#define France__ ;

static void solve(void)
{
	int n;
	std::cin >> n;
	$0
}

int main()
{
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	std::cout.tie(0);
	int t;
	std::cin >> t;
	while (t--)
	{
		solve();
	}
	__Made in France__
}
endsnippet

snippet fori "" i
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++})
	${4}
endsnippet

snippet forir "" i
for (int ${2:i} = ${1:count}; $2 >= 0; $2${3:--})
	${4}
endsnippet

snippet forj "" i
for (int ${2:j} = 0; $2 < ${1:count}; $2${3:++})
	${4}
endsnippet

snippet forjr "" i
for (int ${2:j} = ${1:count}; $2 >= 0; $2${3:--})
	${4}
endsnippet

# static
snippet sca "" i
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# dynamic
snippet dca "" i
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# reinterpret
snippet rca "" i
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# const
snippet cca "" i
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet pii "" i
std::pair<int, int>
endsnippet

snippet vs "" i
std::vector<std::string> v(n)
endsnippet

snippet vl "" i
std::vector<long long int> v(n)
endsnippet

snippet vd "" i
std::vector<double> v(n)
endsnippet

snippet vc "" i
std::vector<char> v(n)
endsnippet

snippet vp "" i
std::vector<std::pair<$1, $2>> v(n)
endsnippet

snippet vv "" i
std::vector<std::vector<$1>> v(n, std::vector<$1>($2))
endsnippet

snippet ll "" i
long long int
endsnippet

snippet ull "" i
unsigned long long int
endsnippet

snippet ui "" i
unsigned int
endsnippet

snippet zu "" i
size_t
endsnippet

snippet pb "" i
push_back($1);
endsnippet

snippet eb "" i
emplace_back($1);
endsnippet

snippet ppb "" i
pop_back($1);
endsnippet

snippet size "" i
int n = $1.size();
endsnippet

snippet len "" i
int n = $1.length();
endsnippet

snippet lbd "" i
std::lower_bound($1.begin(), $1.end(), $2);
endsnippet

snippet ubd "" i
std::upper_bound($1.begin(), $1.end(), $2);
endsnippet

snippet end
{
	std::cout << $0 << std::endl;
	return;
}
endsnippet

snippet btp "" i
__builtin_popcount($1)
endsnippet

snippet ctz "" i
__builtin_ctz($1)
endsnippet

snippet clz "" i
__builtin_clz($1)
endsnippet

snippet parity "" i
__builtin_parity($1)
endsnippet

snippet npos ""
std::string::npos
endsnippet

snippet max "" i
std::max($1, $2);
endsnippet

snippet min "" i
std::min($1, $2);
endsnippet

snippet minel "" i
*min_element(${1:v}.begin(), ${1}.end());
endsnippet

snippet maxel "" i
*max_element(${1:v}.begin(), ${1}.end());
endsnippet

snippet getline "" i
std::getline(std::cin, ${1: name})
endsnippet

snippet kmp
std::vector<int> computeLPS(const std::string& pattern) {
	int n = pattern.size();
	std::vector<int> lps(n, 0);
	int len = 0;
	int i = 1;

	while (i < n)
	{
		if (pattern[i] == pattern[len])
			lps[i++] = ++len;
		else
		{
			if (len > 0) len = lps[len - 1];
			else i++;
		}
	}
	return lps;
}

void	kmp(const std::string& pattern, const std::string& text, std::vector<int>& v)
{
	if (pattern == "")
	{
		v.resize(text.length());
		std::iota(v.begin(), v.end(), 0);
		return;
	}

	int n = text.size(), m = pattern.size();
	std::vector<int> lps = computeLPS(pattern);
	int i = 0, j = 0;
	while (i < n)
	{
		if (text[i] == pattern[j])
		{
			i++;
			j++;
		}
		if (j == m)
		{
			v.push_back(i - j);
			j = lps[j - 1];
		}
		else if (i < n && text[i] != pattern[j])
		{
			if (j > 0)
				j = lps[j - 1];
			else
				i++;
		}
	}
}
endsnippet

snippet opti
#pragma GCC optimize("O3,unroll-loops,fast-math")
#pragma GCC target("avx,avx2,fma")
endsnippet

snippet prime
std::vector<int> findPrime(int n)
{
	std::vector<bool> isPrime(n + 1, true);
	std::vector<int> primes;
	is_prime[0] = is_prime[1] = false;
	for (int i = 2; i * i <= n; i++) {
		if (is_prime[i]) {
			for (int j = i * i; j <= n; j += i)
				is_prime[j] = false;
		}
	}
	for (int i = 2; i <= n; i++) {
		if (is_prime[i]) primes.push_back(i);
	}
	return primes;
}
endsnippet

snippet time
auto start = std::chrono::high_resolution_clock::now();
solve();
auto end = std::chrono::high_resolution_clock::now();

double duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
std::cout << "Execution Time: " << duration / 1e6 << " seconds\n";
endsnippet

snippet pie
3.1415926535 8979323846 2643383279 5028841971 6939937510 5820974944 5923078164 0628620899 8628034825 3421170679
endsnippet

snippet precision
std::cout << std::fixed << std::setprecision($0) << $1 << std::endl;
endsnippet

snippet quicksort
void	quicksort(std::vector<int>& v, int l, int r)
{
	if (l >= r) return;
	int ll = l, rr = r, k = v[l];
	while (l < r)
	{
		while (r > l && v[r] >= k) r--;
		v[l] = v[r];
		while (l < r && v[l] <= k) l++;
		v[r] = v[l];
	}
	v[l] = k;
	quicksort(v, ll, l - 1);
	quicksort(v, r + 1, rr);
}
endsnippet

snippet bit
struct BIT {
	std::vector<int> bit;
	int n;

	bitTree(int n)
	{
		this->n = n + 1;
		bit.assign(n + 1, 0);
	}

	bitTree(const std::vector<int>& v): bitTree(v.size())
	{
		for (size_t i = 0; i < v.size(); i++)
			add(i + 1, v[i]);
	}

	int sum(int i)
	{
		if (i > n) i = n;
		int ans = 0;
		while (i > 0)
		{
			ans += bit[i];
			i -= i & -i;
		}
		return ans;
	}

	void add(int i, int d)
	{
		while (i < n)
		{
			bit[i] += d;
			i += i & -i;
		}
	}
};
endsnippet

snippet iota
std::iota($1.begin(), $1.end(), 0);
endsnippet

snippet monostack
for (int i = n - 1; i >= 0; i--)
	{
		while (!s.empty() && heights[s.back()] > heights[i])
		{
			int idx = s.back();
			s.pop_back();
			left[idx] = idx - i - 1;
		}
		s.push_back(i);
	}
endsnippet

snippet fastpow
long long int fastPower(int x, int p)
{
	long long int res = 1;
	while (p)
	{
		if (p & 1) res = (res * x) % MOD;
		p >>= 1;
		x = (x * x) % MOD;
	}
	return res;
}
endsnippet
# vim:ft=snippets:
